import os
import re
import google.generativeai as genai
from PIL import Image
from pathlib import Path
from dotenv import load_dotenv
import json
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading

load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
model = genai.GenerativeModel('models/gemma-3-27b-it')

CONTENT_STYLE_DESCRIPTION_PROMPT = """
You are an expert visual analyst. Carefully describe the given image in a single, detailed paragraph. 

Focus on:
- The main subject or scene (the "content" of the image) in plain, objective terms.
- The artistic treatment (the "style" applied), including color palette, lighting, texture, and atmosphere.
- How the style influences the perception of the content.
- The overall impression created by the image.

Do NOT mention any artistâ€™s name, painting title, or the process of style transfer itself.
ONLY RETURN THE FINAL DESCRIPTION, NO EXTRA TEXT.
"""

dataset_dir = Path("/path/to/your/dataset")

image_paths = sorted([
    str(p) for p in dataset_dir.glob("*.jpg")
    if p.name.endswith("700.jpg")
])

results = []
results_lock = threading.Lock()

def process_image(image_path):
    try:
        match = re.match(r"content_(\d+)__style_(\d+)__700\.jpg", Path(image_path).name)
        if not match:
            return None
        content_num, style_num = match.groups()

        image = Image.open(image_path)
        description_response = model.generate_content([CONTENT_STYLE_DESCRIPTION_PROMPT, image])
        description = description_response.text.strip()

        result = {
            "content_number": int(content_num),
            "style_number": int(style_num),
            "image_description": description
        }

        with results_lock:
            results.append(result)

        return result
    except Exception as e:
        print(f"error processing {image_path}: {e}")
        return None

MAX_WORKERS = 8  
with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
    futures = [executor.submit(process_image, path) for path in image_paths]

    for future in as_completed(futures):
        res = future.result()
        if res:
            print(f"done: content {res['content_number']}, style {res['style_number']}")

# Save JSON
output_path = dataset_dir / "content_style_descriptions.json"
with open(output_path, "w", encoding="utf-8") as f:
    json.dump(results, f, indent=2)

print(f"descriptions saved to {output_path}")
